
GccApplication7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000290  00000304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000290  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e1  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003e5  00000000  00000000  00000bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000477  00000000  00000000  00000fda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  00001454  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000246  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000039a  00000000  00000000  000017c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 07 01 	call	0x20e	; 0x20e <main>
  8e:	0c 94 46 01 	jmp	0x28c	; 0x28c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <adc_init>:
{
	// Vcc as voltage reference (bits76)
	// right adjustment [ADLAR] (bit5)
	// use ADC0 as input        (bits3210)
	//ADMUX = 0b01100000;
	ADMUX = 0b01000000;
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// initialize ADC       (bit6)
	// no autotrigger       (bit5)
	// don't clear int-flag (bit4)
	// no interrupt         (bit3)
	// clock div by 64@8Mhz=125KHz (bit210) ADC should run at 50kHz to 200kHz, 1MHz gives decreased resolution
	ADCSRA = 0b10000011;
  9c:	83 e8       	ldi	r24, 0x83	; 131
  9e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  a2:	08 95       	ret

000000a4 <adc_read>:
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	// AREF = AVcc
	//ADC_MUX = MUX_REF_VCC | (_ch & 0x07);
	ADMUX = (ADMUX & 0xE0) | (_ch & 0x1F);
  a4:	ec e7       	ldi	r30, 0x7C	; 124
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	90 81       	ld	r25, Z
  aa:	8f 71       	andi	r24, 0x1F	; 31
  ac:	90 7e       	andi	r25, 0xE0	; 224
  ae:	89 2b       	or	r24, r25
  b0:	80 83       	st	Z, r24

	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while((ADCSRA & (1<<ADSC)) != 0);
  bc:	80 81       	ld	r24, Z
  be:	86 fd       	sbrc	r24, 6
  c0:	fd cf       	rjmp	.-6      	; 0xbc <adc_read+0x18>
	//high = ADCH;

	// combine the two bytes
	//return (high << 8) | low;
	//return (ADCH);
	return (ADCW);
  c2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  c6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  ca:	08 95       	ret

000000cc <LCD_CmdWrite>:
   LCD_CmdWrite(0x80);	      // Move the CuRSor to FiRSt line FiRSt Position
}

void LCD_CmdWrite( char cmd)
{
	databus = (cmd & 0xF0);        // SENd the Higher Nibble of the command to LCD
  cc:	98 2f       	mov	r25, r24
  ce:	90 7f       	andi	r25, 0xF0	; 240
  d0:	9b b9       	out	0x0b, r25	; 11
    control_bus &= ~(1<<RS);  // Select the Command Register by pulling RS LOW
  d2:	44 98       	cbi	0x08, 4	; 8
    control_bus |= 1<<EN;     // SENd a High-to-Low Pusle at Enable Pin
  d4:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	00 00       	nop
	_delay_us(1);
    control_bus &= ~(1<<EN);
  d8:	45 98       	cbi	0x08, 5	; 8
  da:	23 e0       	ldi	r18, 0x03	; 3
  dc:	2a 95       	dec	r18
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_CmdWrite+0x10>
  e0:	00 00       	nop

    _delay_us(10);				// wait for some time

    databus = ((cmd<<4) & 0xF0);   // SENd the Lower Nibble of the command to LCD
  e2:	20 e1       	ldi	r18, 0x10	; 16
  e4:	82 9f       	mul	r24, r18
  e6:	c0 01       	movw	r24, r0
  e8:	11 24       	eor	r1, r1
  ea:	8b b9       	out	0x0b, r24	; 11
    control_bus &=~(1<<RS);  // Select the Command Register by pulling RS LOW
  ec:	44 98       	cbi	0x08, 4	; 8
    control_bus |=1<<EN;     // SENd a High-to-Low Pusle at Enable Pin
  ee:	45 9a       	sbi	0x08, 5	; 8
  f0:	00 00       	nop
	_delay_us(1);
    control_bus &=~(1<<EN);
  f2:	45 98       	cbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	89 ef       	ldi	r24, 0xF9	; 249
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_CmdWrite+0x2c>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_CmdWrite+0x32>
  fe:	00 00       	nop
 100:	08 95       	ret

00000102 <LCD_Init>:
 102:	83 ed       	ldi	r24, 0xD3	; 211
 104:	90 e3       	ldi	r25, 0x30	; 48
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_Init+0x4>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_Init+0xa>
 10c:	00 00       	nop
int pow_(int x, int y);

void LCD_Init()
{
   _delay_ms(50);
   databus_direction |= 0xF0;  // Configure both databus and controlbus as output
 10e:	8a b1       	in	r24, 0x0a	; 10
 110:	80 6f       	ori	r24, 0xF0	; 240
 112:	8a b9       	out	0x0a, r24	; 10
   control_direction |= (1<<RS);
 114:	3c 9a       	sbi	0x07, 4	; 7
   control_direction |= (1<<EN);
 116:	3d 9a       	sbi	0x07, 5	; 7
   LCD_CmdWrite(0x02);	       //Initilize the LCD in 4bit Mode
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_CmdWrite>
   LCD_CmdWrite(0x28);
 11e:	88 e2       	ldi	r24, 0x28	; 40
 120:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_CmdWrite>
   LCD_CmdWrite(0x0E);	      // Display ON cuRSor ON
 124:	8e e0       	ldi	r24, 0x0E	; 14
 126:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_CmdWrite>
   LCD_CmdWrite(0x01);	      // Clear the LCD
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_CmdWrite>
   LCD_CmdWrite(0x80);	      // Move the CuRSor to FiRSt line FiRSt Position
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_CmdWrite>
 136:	08 95       	ret

00000138 <LCD_DataWrite>:
   _delay_ms(1);
}

void LCD_DataWrite( char dat)
{
    databus = (dat & 0xF0);	  // SENd the Higher Nibble of the Data to LCD
 138:	98 2f       	mov	r25, r24
 13a:	90 7f       	andi	r25, 0xF0	; 240
 13c:	9b b9       	out	0x0b, r25	; 11
    control_bus |= (1<<RS);	  // Select the Data Register by pulling RS HIGH
 13e:	44 9a       	sbi	0x08, 4	; 8
    control_bus |= (1<<EN);	  // SENd a High-to-Low Pusle at Enable Pin
 140:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	00 00       	nop
	_delay_us(1);
    control_bus &=~(1<<EN);
 144:	45 98       	cbi	0x08, 5	; 8
 146:	23 e0       	ldi	r18, 0x03	; 3
 148:	2a 95       	dec	r18
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_DataWrite+0x10>
 14c:	00 00       	nop
    _delay_us(10);

	databus = ((dat <<4) & 0xF0); // SENd the Lower Nibble of the Data to LCD
 14e:	20 e1       	ldi	r18, 0x10	; 16
 150:	82 9f       	mul	r24, r18
 152:	c0 01       	movw	r24, r0
 154:	11 24       	eor	r1, r1
 156:	8b b9       	out	0x0b, r24	; 11
    control_bus |= (1<<RS);	   // Select the Data Register by pulling RS HIGH
 158:	44 9a       	sbi	0x08, 4	; 8
    control_bus |= (1<<EN);	   // SENd a High-to-Low Pusle at Enable Pin
 15a:	45 9a       	sbi	0x08, 5	; 8
 15c:	00 00       	nop
	_delay_us(1);
    control_bus &=~(1<<EN);
 15e:	45 98       	cbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	89 ef       	ldi	r24, 0xF9	; 249
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <LCD_DataWrite+0x2c>
 168:	00 c0       	rjmp	.+0      	; 0x16a <LCD_DataWrite+0x32>
 16a:	00 00       	nop
 16c:	08 95       	ret

0000016e <lcd_write_string>:
    _delay_ms(1);

}

void lcd_write_string(char* str1)
{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	ec 01       	movw	r28, r24
	int i;
	while(str1[i] != '\0')
 174:	88 81       	ld	r24, Y
 176:	88 23       	and	r24, r24
 178:	31 f0       	breq	.+12     	; 0x186 <lcd_write_string+0x18>
 17a:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_DataWrite(str1[i++]);
 17c:	0e 94 9c 00 	call	0x138	; 0x138 <LCD_DataWrite>
}

void lcd_write_string(char* str1)
{
	int i;
	while(str1[i] != '\0')
 180:	89 91       	ld	r24, Y+
 182:	81 11       	cpse	r24, r1
 184:	fb cf       	rjmp	.-10     	; 0x17c <lcd_write_string+0xe>
	for(i = 0; i < strlen(str1); i++)
	{
		LCD_DataWrite(str1[i]);
	}
	*/
}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <lcd_write_int>:

void lcd_write_int(int val)
{
 18c:	cf 92       	push	r12
 18e:	df 92       	push	r13
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	08 2f       	mov	r16, r24
 19e:	19 2f       	mov	r17, r25
 1a0:	c3 e0       	ldi	r28, 0x03	; 3
 1a2:	d0 e0       	ldi	r29, 0x00	; 0
	}
}

int pow_(int x, int y)
{
	int i, f = 1;
 1a4:	ee 24       	eor	r14, r14
 1a6:	e3 94       	inc	r14
 1a8:	f1 2c       	mov	r15, r1
	for(i = 0; i < y; i++)
 1aa:	c1 2c       	mov	r12, r1
 1ac:	d1 2c       	mov	r13, r1
	int i;
	//sprintf(str, "%d", val);
	//lcd_write_string(str);
	for(i = 0; i < 4; i++)
	{
		str[i] = (val / pow_(10,3-i)) + 0x30;
 1ae:	fe 01       	movw	r30, r28
}

int pow_(int x, int y)
{
	int i, f = 1;
	for(i = 0; i < y; i++)
 1b0:	1c 16       	cp	r1, r28
 1b2:	1d 06       	cpc	r1, r29
 1b4:	ac f4       	brge	.+42     	; 0x1e0 <lcd_write_int+0x54>
 1b6:	2c 2d       	mov	r18, r12
 1b8:	3d 2d       	mov	r19, r13
 1ba:	6e 2d       	mov	r22, r14
 1bc:	7f 2d       	mov	r23, r15
	{
		f = f * x;
 1be:	ab 01       	movw	r20, r22
 1c0:	44 0f       	add	r20, r20
 1c2:	55 1f       	adc	r21, r21
 1c4:	66 0f       	add	r22, r22
 1c6:	77 1f       	adc	r23, r23
 1c8:	66 0f       	add	r22, r22
 1ca:	77 1f       	adc	r23, r23
 1cc:	66 0f       	add	r22, r22
 1ce:	77 1f       	adc	r23, r23
 1d0:	64 0f       	add	r22, r20
 1d2:	75 1f       	adc	r23, r21
}

int pow_(int x, int y)
{
	int i, f = 1;
	for(i = 0; i < y; i++)
 1d4:	2f 5f       	subi	r18, 0xFF	; 255
 1d6:	3f 4f       	sbci	r19, 0xFF	; 255
 1d8:	2e 17       	cp	r18, r30
 1da:	3f 07       	cpc	r19, r31
 1dc:	81 f7       	brne	.-32     	; 0x1be <lcd_write_int+0x32>
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <lcd_write_int+0x58>
	}
}

int pow_(int x, int y)
{
	int i, f = 1;
 1e0:	6e 2d       	mov	r22, r14
 1e2:	7f 2d       	mov	r23, r15
	int i;
	//sprintf(str, "%d", val);
	//lcd_write_string(str);
	for(i = 0; i < 4; i++)
	{
		str[i] = (val / pow_(10,3-i)) + 0x30;
 1e4:	80 2f       	mov	r24, r16
 1e6:	91 2f       	mov	r25, r17
 1e8:	0e 94 1e 01 	call	0x23c	; 0x23c <__divmodhi4>
		val = val % pow_(10,3-i);
 1ec:	08 2f       	mov	r16, r24
 1ee:	19 2f       	mov	r17, r25
		LCD_DataWrite(str[i]);
 1f0:	80 e3       	ldi	r24, 0x30	; 48
 1f2:	86 0f       	add	r24, r22
 1f4:	0e 94 9c 00 	call	0x138	; 0x138 <LCD_DataWrite>
 1f8:	21 97       	sbiw	r28, 0x01	; 1
 1fa:	c8 f6       	brcc	.-78     	; 0x1ae <lcd_write_int+0x22>
	}
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	0f 91       	pop	r16
 204:	ff 90       	pop	r15
 206:	ef 90       	pop	r14
 208:	df 90       	pop	r13
 20a:	cf 90       	pop	r12
 20c:	08 95       	ret

0000020e <main>:
#include <avr/io.h>
#include "adc.h"
#include "lcdlib.h"

int main(void)
{LCD_Init();
 20e:	0e 94 81 00 	call	0x102	; 0x102 <LCD_Init>
	adc_init();
 212:	0e 94 4b 00 	call	0x96	; 0x96 <adc_init>
    /* Replace with your application code */
    while (1) 
    {LCD_Init();
 216:	0e 94 81 00 	call	0x102	; 0x102 <LCD_Init>
	lcd_write_string("Temp= ")	;
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_write_string>
		//adc_init();
   lcd_write_int((adc_read(0x0)/2)-1);
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 52 00 	call	0xa4	; 0xa4 <adc_read>
 228:	96 95       	lsr	r25
 22a:	87 95       	ror	r24
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_write_int>
    lcd_write_string(" c ");
 232:	87 e0       	ldi	r24, 0x07	; 7
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_write_string>
	}
 23a:	ed cf       	rjmp	.-38     	; 0x216 <main+0x8>

0000023c <__divmodhi4>:
 23c:	97 fb       	bst	r25, 7
 23e:	07 2e       	mov	r0, r23
 240:	16 f4       	brtc	.+4      	; 0x246 <__divmodhi4+0xa>
 242:	00 94       	com	r0
 244:	07 d0       	rcall	.+14     	; 0x254 <__divmodhi4_neg1>
 246:	77 fd       	sbrc	r23, 7
 248:	09 d0       	rcall	.+18     	; 0x25c <__divmodhi4_neg2>
 24a:	0e 94 32 01 	call	0x264	; 0x264 <__udivmodhi4>
 24e:	07 fc       	sbrc	r0, 7
 250:	05 d0       	rcall	.+10     	; 0x25c <__divmodhi4_neg2>
 252:	3e f4       	brtc	.+14     	; 0x262 <__divmodhi4_exit>

00000254 <__divmodhi4_neg1>:
 254:	90 95       	com	r25
 256:	81 95       	neg	r24
 258:	9f 4f       	sbci	r25, 0xFF	; 255
 25a:	08 95       	ret

0000025c <__divmodhi4_neg2>:
 25c:	70 95       	com	r23
 25e:	61 95       	neg	r22
 260:	7f 4f       	sbci	r23, 0xFF	; 255

00000262 <__divmodhi4_exit>:
 262:	08 95       	ret

00000264 <__udivmodhi4>:
 264:	aa 1b       	sub	r26, r26
 266:	bb 1b       	sub	r27, r27
 268:	51 e1       	ldi	r21, 0x11	; 17
 26a:	07 c0       	rjmp	.+14     	; 0x27a <__udivmodhi4_ep>

0000026c <__udivmodhi4_loop>:
 26c:	aa 1f       	adc	r26, r26
 26e:	bb 1f       	adc	r27, r27
 270:	a6 17       	cp	r26, r22
 272:	b7 07       	cpc	r27, r23
 274:	10 f0       	brcs	.+4      	; 0x27a <__udivmodhi4_ep>
 276:	a6 1b       	sub	r26, r22
 278:	b7 0b       	sbc	r27, r23

0000027a <__udivmodhi4_ep>:
 27a:	88 1f       	adc	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	5a 95       	dec	r21
 280:	a9 f7       	brne	.-22     	; 0x26c <__udivmodhi4_loop>
 282:	80 95       	com	r24
 284:	90 95       	com	r25
 286:	bc 01       	movw	r22, r24
 288:	cd 01       	movw	r24, r26
 28a:	08 95       	ret

0000028c <_exit>:
 28c:	f8 94       	cli

0000028e <__stop_program>:
 28e:	ff cf       	rjmp	.-2      	; 0x28e <__stop_program>
